// <auto-generated />
using System;
using ACS.AppDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ACS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220901105724_employeeNoAdded")]
    partial class employeeNoAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ACS.Models.AdvanceSalary", b =>
                {
                    b.Property<int>("AdvanceSalaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvanceSalaryID"), 1L, 1);

                    b.Property<double>("AdvSalary")
                        .HasColumnType("float");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AdvanceSalaryID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AdvanceSalary");
                });

            modelBuilder.Entity("ACS.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermenant")
                        .HasColumnType("bit");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("ACS.Models.EmployeeAttendence", b =>
                {
                    b.Property<int>("EmployeeAttendenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeAttendenceID"), 1L, 1);

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeAttendenceID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("EmployeeAttendence");
                });

            modelBuilder.Entity("ACS.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"), 1L, 1);

                    b.Property<int>("ArticleNo")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("DiscountDays")
                        .HasColumnType("int");

                    b.Property<int>("GRNo")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("MarkOn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MonthlyRent")
                        .HasColumnType("float");

                    b.Property<string>("PMarka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyID")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("RackNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomNo")
                        .HasColumnType("int");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InventoryID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ItemID");

                    b.HasIndex("PartyID");

                    b.HasIndex("SizeID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("ACS.Models.InventoryNote", b =>
                {
                    b.Property<int>("InventoryNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryNoteID"), 1L, 1);

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("NoteID")
                        .HasColumnType("int");

                    b.HasKey("InventoryNoteID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("NoteID");

                    b.ToTable("InventoryNote");
                });

            modelBuilder.Entity("ACS.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyID")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("PartyID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("ACS.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"), 1L, 1);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Item");

                    b.HasData(
                        new
                        {
                            ItemID = 1,
                            CreatedByUserID = 1,
                            CreatedDateTime = new DateTime(2022, 9, 1, 15, 57, 22, 970, DateTimeKind.Local).AddTicks(4675),
                            ItemName = "Cold Drinks"
                        },
                        new
                        {
                            ItemID = 2,
                            CreatedByUserID = 1,
                            CreatedDateTime = new DateTime(2022, 9, 1, 15, 57, 22, 970, DateTimeKind.Local).AddTicks(4678),
                            ItemName = "ice cream"
                        });
                });

            modelBuilder.Entity("ACS.Models.Ledger", b =>
                {
                    b.Property<int>("LedgerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LedgerID"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("LedgerID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Ledger");
                });

            modelBuilder.Entity("ACS.Models.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteID"), 1L, 1);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NoteDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("NoteID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("ACS.Models.Party", b =>
                {
                    b.Property<int>("PartyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartyID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PartyID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            PartyID = 1,
                            Address = "baju me",
                            Contact = "sdasd",
                            CreatedByUserID = 1,
                            CreatedDateTime = new DateTime(2022, 9, 1, 15, 57, 22, 970, DateTimeKind.Local).AddTicks(4703),
                            PartyName = "Ashfaq"
                        },
                        new
                        {
                            PartyID = 2,
                            Address = "baju me",
                            Contact = "sdasd",
                            CreatedByUserID = 1,
                            CreatedDateTime = new DateTime(2022, 9, 1, 15, 57, 22, 970, DateTimeKind.Local).AddTicks(4811),
                            PartyName = "ismail"
                        });
                });

            modelBuilder.Entity("ACS.Models.PartyLedger", b =>
                {
                    b.Property<int>("PartyLedgerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartyLedgerID"), 1L, 1);

                    b.Property<double>("ClosingBalance")
                        .HasColumnType("float");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartyID")
                        .HasColumnType("int");

                    b.Property<double>("TodayCredit")
                        .HasColumnType("float");

                    b.Property<double>("TodayDebit")
                        .HasColumnType("float");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PartyLedgerID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PartyID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PartyLedger");
                });

            modelBuilder.Entity("ACS.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionSubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionId");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("ACS.Models.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"), 1L, 1);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("ACS.Models.RoomAllotment", b =>
                {
                    b.Property<int>("RoomAllotmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomAllotmentID"), 1L, 1);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("MonthlyRent")
                        .HasColumnType("float");

                    b.Property<int>("PartyID")
                        .HasColumnType("int");

                    b.Property<string>("RoomNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomAllotmentID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PartyID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RoomAllotment");
                });

            modelBuilder.Entity("ACS.Models.Settings", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingID"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingID");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            SettingID = 1,
                            Key = "GRNo",
                            Value = "1"
                        });
                });

            modelBuilder.Entity("ACS.Models.ShipmentDetails", b =>
                {
                    b.Property<int>("ShipmentDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentDetailsID"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AmountReceived")
                        .HasColumnType("float");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyID")
                        .HasColumnType("int");

                    b.Property<string>("Shipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShipmentDetailsID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PartyID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ShipmentDetails");
                });

            modelBuilder.Entity("ACS.Models.Size", b =>
                {
                    b.Property<int>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeID"), 1L, 1);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SizeID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            SizeID = 1,
                            CreatedByUserID = 1,
                            CreatedDateTime = new DateTime(2022, 9, 1, 15, 57, 22, 970, DateTimeKind.Local).AddTicks(4615),
                            Name = "Medium"
                        });
                });

            modelBuilder.Entity("ACS.Models.StockOut", b =>
                {
                    b.Property<int>("StockOutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockOutID"), 1L, 1);

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedByPartyID")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int?>("UpdatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StockOutID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ReceivedByPartyID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("StockOut");
                });

            modelBuilder.Entity("ACS.Models.User_Model.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            IsActive = true,
                            Title = "Admin"
                        });
                });

            modelBuilder.Entity("ACS.Models.User_Model.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<int?>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiredPasswordChange")
                        .HasColumnType("bit");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "admin@gmail.com",
                            FirstName = "Super",
                            IsActive = true,
                            LastName = "Admin",
                            Password = "s8scmb168Cftrf3LG8cFMjQRHk8LXGSAC9iYfOIBymK3f1Jx/wY6Tpt7jccy2MWd17vta8mAcP74Eg+BFzOQew==",
                            RequiredPasswordChange = false,
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("ACS.Models.AdvanceSalary", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("AdvanceSalariesCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Employee", "Employee")
                        .WithMany("AdvanceSalaries")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("AdvanceSalariesUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Employee");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Employee", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("EmployeesCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("EmployeesUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.EmployeeAttendence", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("EmployeeAttendenceCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Employee", "Employee")
                        .WithMany("EmployeeAttendences")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("EmployeeAttendenceUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Employee");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Inventory", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("InventoriesCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Item", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Party", "Party")
                        .WithMany("Inventories")
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Size", "Size")
                        .WithMany("Inventories")
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("InventoriesUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Item");

                    b.Navigation("Party");

                    b.Navigation("Size");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.InventoryNote", b =>
                {
                    b.HasOne("ACS.Models.Inventory", "Inventory")
                        .WithMany("InventoryNotes")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Note", "Note")
                        .WithMany("InventoryNotes")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ACS.Models.Invoice", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("InvoicesCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Inventory", "Inventory")
                        .WithMany("Invoices")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Party", "Party")
                        .WithMany("Invoices")
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("InvoicesUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Inventory");

                    b.Navigation("Party");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Item", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("ItemsCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("ItemsUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Ledger", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("LedgersCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Invoice", "Invoice")
                        .WithMany("Ledgers")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("LedgersUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Invoice");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Note", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Party", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("PartiesCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("PartiesUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.PartyLedger", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("PartyLedgersCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Party", "Party")
                        .WithMany("PartyLedgers")
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("PartyLedgersUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Party");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Permission", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("PermissionsCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("PermissionsUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.RolePermission", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("RolePermissionsCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("RolePermissionsUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.RoomAllotment", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("RoomAllotmentsCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Party", "Party")
                        .WithMany("RoomAllotments")
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("RoomAllotmentsUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Party");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.ShipmentDetails", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("ShipmentDetailsCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Party", "Party")
                        .WithMany("ShipmentDetails")
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("ShipmentDetailsUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Party");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.Size", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("SizesCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("SizesUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.StockOut", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany("StockOutsCreated")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Inventory", "Inventory")
                        .WithMany("StockOuts")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Item", "Item")
                        .WithMany("StockOuts")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.Party", "Party")
                        .WithMany("StockOuts")
                        .HasForeignKey("ReceivedByPartyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ACS.Models.User_Model.User", "UpdatedByUser")
                        .WithMany("StockOutsUpdated")
                        .HasForeignKey("UpdatedByUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Inventory");

                    b.Navigation("Item");

                    b.Navigation("Party");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ACS.Models.User_Model.User", b =>
                {
                    b.HasOne("ACS.Models.User_Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("ACS.Models.User_Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ACS.Models.Employee", b =>
                {
                    b.Navigation("AdvanceSalaries");

                    b.Navigation("EmployeeAttendences");
                });

            modelBuilder.Entity("ACS.Models.Inventory", b =>
                {
                    b.Navigation("InventoryNotes");

                    b.Navigation("Invoices");

                    b.Navigation("StockOuts");
                });

            modelBuilder.Entity("ACS.Models.Invoice", b =>
                {
                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("ACS.Models.Item", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("StockOuts");
                });

            modelBuilder.Entity("ACS.Models.Note", b =>
                {
                    b.Navigation("InventoryNotes");
                });

            modelBuilder.Entity("ACS.Models.Party", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Invoices");

                    b.Navigation("PartyLedgers");

                    b.Navigation("RoomAllotments");

                    b.Navigation("ShipmentDetails");

                    b.Navigation("StockOuts");
                });

            modelBuilder.Entity("ACS.Models.Size", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("ACS.Models.User_Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ACS.Models.User_Model.User", b =>
                {
                    b.Navigation("AdvanceSalariesCreated");

                    b.Navigation("AdvanceSalariesUpdated");

                    b.Navigation("EmployeeAttendenceCreated");

                    b.Navigation("EmployeeAttendenceUpdated");

                    b.Navigation("EmployeesCreated");

                    b.Navigation("EmployeesUpdated");

                    b.Navigation("InventoriesCreated");

                    b.Navigation("InventoriesUpdated");

                    b.Navigation("InvoicesCreated");

                    b.Navigation("InvoicesUpdated");

                    b.Navigation("ItemsCreated");

                    b.Navigation("ItemsUpdated");

                    b.Navigation("LedgersCreated");

                    b.Navigation("LedgersUpdated");

                    b.Navigation("PartiesCreated");

                    b.Navigation("PartiesUpdated");

                    b.Navigation("PartyLedgersCreated");

                    b.Navigation("PartyLedgersUpdated");

                    b.Navigation("PermissionsCreated");

                    b.Navigation("PermissionsUpdated");

                    b.Navigation("RolePermissionsCreated");

                    b.Navigation("RolePermissionsUpdated");

                    b.Navigation("RoomAllotmentsCreated");

                    b.Navigation("RoomAllotmentsUpdated");

                    b.Navigation("ShipmentDetailsCreated");

                    b.Navigation("ShipmentDetailsUpdated");

                    b.Navigation("SizesCreated");

                    b.Navigation("SizesUpdated");

                    b.Navigation("StockOutsCreated");

                    b.Navigation("StockOutsUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
