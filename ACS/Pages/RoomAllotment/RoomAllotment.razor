@using ACS.Data;
@using ACS.ViewModels;
@page "/RoomAllotment"
@inject RoomAllotmentManagerService _service;
@inject Radzen.DialogService dialogService

@code {

    //private RoomAllotmentView roomAllotment = new RoomAllotmentView();
    private List<PartyView> parties;
    private List<RoomAllotmentView> roomAllotments;

    protected override void OnInitialized()
    {
        roomAllotments = _service.GetAllRoomAllotments();
        parties = _service.GetAllParties(); 
    }

    async Task OpenAddNewModel(int ID)
    {
        var roomAllotment  = await dialogService.OpenAsync<AddRoomAllotmentComponent>($"",
                new Dictionary<string, object>()
                {
                     { "RoomAllotmentID", ID + "" }                     
                },
        new DialogOptions() { ShowTitle = false, Width = "700px", Resizable = true, Draggable = true });

        //if (roomAllotment != null)
        //{
        //    var exist = roomAllotments.FirstOrDefault(x => x.RoomAllotmentID == roomAllotment.RoomAllotmentID);
        //    if (exist != null)
        //    {
        //        roomAllotments.Remove(exist);
        //    }
        //    roomAllotments.Add(roomAllotment);
        //}
        roomAllotments = _service.GetAllRoomAllotments();
        //roomAllotments.OrderByDescending(x => x.RoomAllotmentID);
    }


    async Task DeleteRoomAllotment(int id)
    {
        var resp = await dialogService.Confirm("Are you sure you want to delete this Allotment?", "Delete Allotment", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (await _service.DeleteRoomAllotment(id))
        if(resp==true){
        {
            //Success
            roomAllotments.Remove(roomAllotments.FirstOrDefault(x => x.RoomAllotmentID == id));
        }
        }
        

    }
}


<div class="content-page">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="d-flex flex-wrap flex-wrap align-items-center justify-content-between mb-4">
                    <div>
                        <h4 class="mb-3">Room Allotments</h4>
                    </div>
                    <button @onclick="(async ()=> await OpenAddNewModel(0))" class="btn btn-primary add-list"><i class="las la-plus mr-3"></i>Add Room Allotment</button>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="table-responsive rounded mb-3">
                    <table class="data-table table mb-0 tbl-server-info">
                        <thead class="bg-white text-uppercase">
                            <tr class="ligth ligth-data">
                                <th>Room No</th>
                                <th>Party</th>
                                <th>Monthly Rent</th>
                                 <th>Date</th>
                              
                               
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody class="ligth-body">

                            @if (roomAllotments?.Count > 0)
                            {
                                @foreach (var roomAllotment in roomAllotments)
                                {
                                    <tr>
                                        <td>@roomAllotment.RoomNo</td>
                                        <td>@roomAllotment.Party.PartyName</td>
                                        <td>@roomAllotment.MonthlyRent</td>
                                        <td>@roomAllotment.StartDate.ToString("dd-MM-yyyy")</td>
                                        

                                        <td>
                                            <div class="d-flex align-items-center list-action">
                                                @*<a class="badge badge-info mr-2" data-toggle="tooltip" data-placement="top" title="" data-original-title="View" href="#"><i class="ri-eye-line mr-0"></i></a>*@
                                                <button class="badge bg-success mr-2" data-toggle="tooltip" data-placement="top" title="" data-original-title="Edit" @onclick="(async ()=> await OpenAddNewModel(roomAllotment.RoomAllotmentID))"><i class="ri-pencil-line mr-0"></i></button>
                                                <a class="badge bg-warning mr-2" data-toggle="tooltip" data-placement="top" title="" data-original-title="Delete" @onclick="() => DeleteRoomAllotment(roomAllotment.RoomAllotmentID)"><i class="ri-delete-bin-line mr-0"></i></a>
                                            </div>
                                        </td>

                                        @*<td><a class="btn btn-warning" href="/EditEmployee/@emp.EmployeeID">Edit</a></td>
                                <td><a class="btn btn-danger" @onclick="() => DeleteEmployee(emp.EmployeeID)">Delete</a></td>*@
                                    </tr>
                                }
                            }



                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- Page end  -->
    </div>
    </div>